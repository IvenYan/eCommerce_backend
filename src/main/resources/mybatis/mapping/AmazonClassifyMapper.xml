<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.management.backend.api.mybatis.mapper.AmazonClassifyMapper" >
  <resultMap id="BaseResultMap" type="com.management.backend.api.mybatis.model.AmazonClassify" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="englishName" property="value" jdbcType="VARCHAR" />
    <result column="pid" property="pid" jdbcType="INTEGER" />
    <result column="englishNameLabel" property="label" jdbcType="VARCHAR" />
    <result column="amazonType" property="amazontype" jdbcType="VARCHAR" />
    <result column="nodeId" property="nodeid" jdbcType="VARCHAR" />
    <result column="hasChild" property="hasChildren" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, pid, englishName, amazonType, nodeId, hasChild
  </sql>
  <!--最新数据库版本 还未使用-->
  <select id="selectByPidAmazonClassifyProduct" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    id, name, pid, englishName,englishName as englishNameLabel,nodeId,hasChild
    from amazon_product_classify_v2 where pid = ${pid}
      order by id
  </select>
    <!--最新数据库表的操作-->
    <select id="selectAmazonProductClassifyV2ByPid" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    id,chineseName as name, pid, nodeType as englishName,nodeType as englishNameLabel,nodeId
    from amazon_product_classify_v2 where pid = ${pid}
      order by id
  </select>
  <select id="selectByPid" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    id, name, pid, englishName,englishName as englishNameLabel,nodeId,hasChild
    from amazon_classify where pid = ${pid}
      order by id
  </select>
  <select id="selectBySearchPid" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    id, name, pid, englishName,englishName as englishNameLabel,nodeId,hasChild
    from amazon_classify where pid = ${pid}
      order by id
  </select>
  <select id="selectBySearchName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    id, name, pid, englishName,englishName as englishNameLabel,nodeId,hasChild
    from amazon_classify where englishName like #{searchName,jdbcType=VARCHAR}
      order by id
  </select>

  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.management.backend.api.mybatis.model.AmazonClassifyExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from amazon_classify
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from amazon_classify
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from amazon_classify
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.management.backend.api.mybatis.model.AmazonClassifyExample" >
    delete from amazon_classify
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.management.backend.api.mybatis.model.AmazonClassify" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into amazon_classify (name, pid, englishName,
      amazonType, nodeId, hasChild
      )
    values (#{name,jdbcType=VARCHAR}, #{pid,jdbcType=INTEGER}, #{englishname,jdbcType=VARCHAR},
      #{amazontype,jdbcType=VARCHAR}, #{nodeid,jdbcType=VARCHAR}, #{haschild,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.management.backend.api.mybatis.model.AmazonClassify" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into amazon_classify
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        name,
      </if>
      <if test="pid != null" >
        pid,
      </if>
      <if test="englishname != null" >
        englishName,
      </if>
      <if test="amazontype != null" >
        amazonType,
      </if>
      <if test="nodeid != null" >
        nodeId,
      </if>
      <if test="haschild != null" >
        hasChild,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="englishname != null" >
        #{englishname,jdbcType=VARCHAR},
      </if>
      <if test="amazontype != null" >
        #{amazontype,jdbcType=VARCHAR},
      </if>
      <if test="nodeid != null" >
        #{nodeid,jdbcType=VARCHAR},
      </if>
      <if test="haschild != null" >
        #{haschild,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.management.backend.api.mybatis.model.AmazonClassifyExample" resultType="java.lang.Integer" >
    select count(*) from amazon_classify
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update amazon_classify
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.pid != null" >
        pid = #{record.pid,jdbcType=INTEGER},
      </if>
      <if test="record.englishname != null" >
        englishName = #{record.englishname,jdbcType=VARCHAR},
      </if>
      <if test="record.amazontype != null" >
        amazonType = #{record.amazontype,jdbcType=VARCHAR},
      </if>
      <if test="record.nodeid != null" >
        nodeId = #{record.nodeid,jdbcType=VARCHAR},
      </if>
      <if test="record.haschild != null" >
        hasChild = #{record.haschild,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update amazon_classify
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      pid = #{record.pid,jdbcType=INTEGER},
      englishName = #{record.englishname,jdbcType=VARCHAR},
      amazonType = #{record.amazontype,jdbcType=VARCHAR},
      nodeId = #{record.nodeid,jdbcType=VARCHAR},
      hasChild = #{record.haschild,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.management.backend.api.mybatis.model.AmazonClassify" >
    update amazon_classify
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="pid != null" >
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="englishname != null" >
        englishName = #{englishname,jdbcType=VARCHAR},
      </if>
      <if test="amazontype != null" >
        amazonType = #{amazontype,jdbcType=VARCHAR},
      </if>
      <if test="nodeid != null" >
        nodeId = #{nodeid,jdbcType=VARCHAR},
      </if>
      <if test="haschild != null" >
        hasChild = #{haschild,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.management.backend.api.mybatis.model.AmazonClassify" >
    update amazon_classify
    set name = #{name,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER},
      englishName = #{englishname,jdbcType=VARCHAR},
      amazonType = #{amazontype,jdbcType=VARCHAR},
      nodeId = #{nodeid,jdbcType=VARCHAR},
      hasChild = #{haschild,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
