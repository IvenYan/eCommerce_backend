<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.management.backend.api.mybatis.mapper.AmazonProductClassifyMapper">
  <resultMap id="BaseResultMap" type="com.management.backend.api.mybatis.model.AmazonProductClassify">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="nodeId" jdbcType="VARCHAR" property="nodeid" />
    <result column="nodePath" jdbcType="VARCHAR" property="nodepath" />
    <result column="pid" jdbcType="INTEGER" property="pid" />
    <result column="nodeType" jdbcType="VARCHAR" property="nodetype" />
      <result column="chineseName" jdbcType="VARCHAR" property="chineseName" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, nodeId, nodePath, pid, nodeType,chineseName
  </sql>
  <select id="selectByExample" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassifyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from amazon_product_classify_v2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from amazon_product_classify_v2
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from amazon_product_classify_v2
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassifyExample">
    delete from amazon_product_classify_v2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassify">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into amazon_product_classify_v2 (nodeId, nodePath, pid,
      nodeType)
    values (#{nodeid,jdbcType=VARCHAR}, #{nodepath,jdbcType=VARCHAR}, #{pid,jdbcType=INTEGER},
      #{nodetype,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassify">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into amazon_product_classify_v2
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nodeid != null">
        nodeId,
      </if>
      <if test="nodepath != null">
        nodePath,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="nodetype != null">
        nodeType,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nodeid != null">
        #{nodeid,jdbcType=VARCHAR},
      </if>
      <if test="nodepath != null">
        #{nodepath,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
      <if test="nodetype != null">
        #{nodetype,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassifyExample" resultType="java.lang.Integer">
    select count(*) from amazon_product_classify_v2
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update amazon_product_classify_v2
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.nodeid != null">
        nodeId = #{record.nodeid,jdbcType=VARCHAR},
      </if>
      <if test="record.nodepath != null">
        nodePath = #{record.nodepath,jdbcType=VARCHAR},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=INTEGER},
      </if>
      <if test="record.nodetype != null">
        nodeType = #{record.nodetype,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update amazon_product_classify_v2
    set id = #{record.id,jdbcType=INTEGER},
      nodeId = #{record.nodeid,jdbcType=VARCHAR},
      nodePath = #{record.nodepath,jdbcType=VARCHAR},
      pid = #{record.pid,jdbcType=INTEGER},
      nodeType = #{record.nodetype,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassify">
    update amazon_product_classify_v2
    <set>
      <if test="nodeid != null">
        nodeId = #{nodeid,jdbcType=VARCHAR},
      </if>
      <if test="nodepath != null">
        nodePath = #{nodepath,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
      <if test="nodetype != null">
        nodeType = #{nodetype,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.management.backend.api.mybatis.model.AmazonProductClassify">
    update amazon_product_classify_v2
    set nodeId = #{nodeid,jdbcType=VARCHAR},
      nodePath = #{nodepath,jdbcType=VARCHAR},
      pid = #{pid,jdbcType=INTEGER},
      nodeType = #{nodetype,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updatePid" parameterType="java.lang.Integer">
    update amazon_product_classify_v2
    set
      pid = #{pid,jdbcType=INTEGER}

    where id = #{sourceId,jdbcType=INTEGER}
  </update>
  <update id="updatePidAndChineseName" parameterType="java.lang.Object">
    update amazon_product_classify_v2
    set
      pid = #{pid,jdbcType=INTEGER},chineseName=#{chineseName,jdbcType=VARCHAR}

    where id = #{sourceId,jdbcType=INTEGER}
  </update>

  <update id="updatePidAndNodeType" parameterType="java.lang.Object">
    update amazon_product_classify_v2
    set
      pid = #{pid,jdbcType=INTEGER},nodeType=#{nodeType,jdbcType=VARCHAR},chineseName=#{chineseName,jdbcType=VARCHAR}

    where id = #{sourceId,jdbcType=INTEGER}
  </update>

  <select id="selectByNodePath" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from amazon_product_classify_v2
    where nodePath = #{nodePath,jdbcType=VARCHAR}
  </select>

  <select id="selectByNodeType" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from amazon_product_classify_v2
    where nodeType = #{nodeType,jdbcType=VARCHAR}
  </select>
</mapper>
